"""
Ferramentas para coleta e an√°lise de dados AWS.
"""

import json
import sys
import os
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any

# Adicionar o diret√≥rio raiz ao path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../..')))

from haystack.tools import tool
from src.clouds.aws.cost_explorer import CostExplorer
from src.clouds.aws.cost_analyzer import CostAnalyzer
from src.ia.tools.utility_tools import validate_and_adjust_date_range
from src.ia.tools.service_resolver import service_resolver


class JsonEncoder(json.JSONEncoder):
    """Encoder JSON personalizado para lidar com tipos especiais como Decimal e datetime."""
    def default(self, obj):
        from decimal import Decimal
        from datetime import datetime, date
        
        if isinstance(obj, Decimal):
            return float(obj)
        elif isinstance(obj, (datetime, date)):
            return obj.isoformat()
        return super().default(obj)


@tool
def get_top_services(start_date: Optional[str] = None, end_date: Optional[str] = None, limit: int = 5) -> str:
    """
    Obt√©m os top servi√ßos mais caros da AWS.
    
    Args:
        start_date: Data de in√≠cio (YYYY-MM-DD) - opcional, padr√£o √∫ltimos 30 dias
        end_date: Data de fim (YYYY-MM-DD) - opcional, padr√£o hoje
        limit: N√∫mero de servi√ßos a retornar (padr√£o 5)
        
    Returns:
        JSON com lista dos servi√ßos mais caros
    """
    print("GET TOP SERVICES", start_date, end_date, limit)
    
    try:
        cost_explorer = CostExplorer()
        
        # Se n√£o especificou datas, usar √∫ltimo m√™s
        if not start_date or not end_date:
            end_date = datetime.now().strftime('%Y-%m-%d')
            start_date = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
        
        # Validar e ajustar as datas antes de usar
        validated_start, validated_end = validate_and_adjust_date_range(start_date, end_date)
        
        print(f"GET TOP SERVICES - Using validated period: {validated_start} to {validated_end}")
        
        top_services = cost_explorer.get_top_services(
            start_date=validated_start, 
            end_date=validated_end, 
            limit=limit
        )
        
        # Se n√£o houver dados, tentar per√≠odo menor
        if not top_services or len(top_services) == 0:
            # Tentar √∫ltimos 7 dias
            fallback_start = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
            fallback_end = datetime.now().strftime('%Y-%m-%d')
            
            print(f"GET TOP SERVICES - No data found, trying fallback period: {fallback_start} to {fallback_end}")
            
            top_services = cost_explorer.get_top_services(
                start_date=fallback_start,
                end_date=fallback_end,
                limit=limit
            )
        
        result = json.dumps(top_services, cls=JsonEncoder, ensure_ascii=False, indent=2)
        return result
        
    except Exception as e:
        print(f"GET TOP SERVICES ERROR: {e}")
        
        # Se for erro de limita√ß√£o hist√≥rica, fornecer orienta√ß√£o espec√≠fica
        if "historical data beyond 14 months" in str(e):
            return json.dumps({
                "error": "Limita√ß√£o de dados hist√≥ricos do AWS Cost Explorer",
                "message": "A AWS Cost Explorer s√≥ permite acesso a dados dos √∫ltimos 14 meses",
                "solution": "Ajustando automaticamente para per√≠odo v√°lido",
                "current_date": datetime.now().strftime('%Y-%m-%d'),
                "using_period": "√∫ltimos 30 dias"
            }, ensure_ascii=False, indent=2)
        
        return f"Erro ao obter top servi√ßos: {str(e)}"


@tool
def get_service_details(service_name: str, start_date: Optional[str] = None, end_date: Optional[str] = None) -> str:
    """
    Obt√©m detalhes de custos de um servi√ßo espec√≠fico com resolu√ß√£o autom√°tica do nome.
    
    Args:
        service_name: Nome do servi√ßo AWS (aceita apelidos como 'rds', 'ec2', etc.)
        start_date: Data de in√≠cio (YYYY-MM-DD) - opcional
        end_date: Data de fim (YYYY-MM-DD) - opcional
        
    Returns:
        Detalhes de custo do servi√ßo especificado
    """
    print(f"GET SERVICE DETAILS - Service: {service_name}, Start: {start_date}, End: {end_date}")
    
    try:
        # üîß NOVA FUNCIONALIDADE: Resolu√ß√£o autom√°tica do nome do servi√ßo
        resolved_name, confidence, suggestions = service_resolver.resolve_service_name(service_name)
        
        if confidence >= 0.8:
            actual_service_name = resolved_name
            print(f"‚úÖ Servi√ßo resolvido: '{service_name}' ‚Üí '{actual_service_name}' (confian√ßa: {confidence:.2f})")
        elif confidence > 0.0:
            actual_service_name = resolved_name
            print(f"ü§î Servi√ßo resolvido com baixa confian√ßa: '{service_name}' ‚Üí '{actual_service_name}' (confian√ßa: {confidence:.2f})")
            if suggestions:
                print(f"üí° Outras sugest√µes: {', '.join(suggestions[:3])}")
        else:
            actual_service_name = service_name
            print(f"‚ö†Ô∏è  N√£o foi poss√≠vel resolver '{service_name}', usando nome original")
            if suggestions:
                print(f"üí° Servi√ßos similares encontrados: {', '.join(suggestions[:3])}")
        
        cost_explorer = CostExplorer()
        
        # Se as datas foram fornecidas, validar antes de usar
        validated_start, validated_end = validate_and_adjust_date_range(start_date, end_date)
        
        print(f"GET SERVICE DETAILS - Using validated dates - Start: {validated_start}, End: {validated_end}")
        service_details = cost_explorer.get_service_details(actual_service_name, validated_start, validated_end)
        print(service_details)
        # Adicionar informa√ß√µes de resolu√ß√£o
        service_details['_service_resolution'] = {
            'original_input': service_name,
            'resolved_name': actual_service_name,
            'confidence': confidence,
            'resolution_applied': actual_service_name != service_name,
            'alternative_suggestions': suggestions[:3] if suggestions else []
        }
        
        result = json.dumps(service_details, cls=JsonEncoder, ensure_ascii=False, indent=2)
        return result
        
    except Exception as e:
        print(f"GET SERVICE DETAILS ERROR: {e}")
        # Se for erro de limita√ß√£o hist√≥rica, fornecer orienta√ß√£o espec√≠fica
        if "historical data beyond 14 months" in str(e):
            return json.dumps({
                "error": "Limita√ß√£o de dados hist√≥ricos do AWS Cost Explorer",
                "message": "A AWS Cost Explorer s√≥ permite acesso a dados dos √∫ltimos 14 meses",
                "solution": "Use datas mais recentes (√∫ltimos 13 meses) para an√°lise",
                "current_date": datetime.now().strftime('%Y-%m-%d'),
                "suggested_start_date": (datetime.now() - timedelta(days=390)).strftime('%Y-%m-%d'),
                "service_attempted": service_name
            }, ensure_ascii=False, indent=2)
        
        return f"Erro ao obter detalhes do servi√ßo: {str(e)}"


@tool
def get_aws_tags() -> str:
    """
    Obt√©m as tags da AWS.
    """
    cost_explorer = CostExplorer()
    tags = cost_explorer.get_tags()
    print("GET AWS TAGS")
    try:
        return tags
    except Exception as e:
        return f"Erro ao obter tags: {str(e)}"


@tool
def get_dimension_values(dimension_name: str) -> str:
    """
    Obt√©m os valores de uma dimens√£o espec√≠fica.
    
    Args:
        dimension_name: Dimens√£o desejada ('SERVICE', 'USAGE_TYPE', 'INSTANCE_TYPE', etc.)
    """
    cost_explorer = CostExplorer()
    print("GET DIMENSION VALUES", dimension_name)
    try:
        dimension_values = cost_explorer.get_dimension_values(dimension_name)
        return dimension_values
    except Exception as e:
        return f"Erro ao obter valores da dimens√£o: {str(e)}"


@tool
def discover_account_resources(limit: int = 5) -> str:
    """
    Descobre todos os recursos ativos na conta AWS com limita√ß√£o configur√°vel.
    
    Args:
        limit: N√∫mero m√°ximo de recursos a retornar por categoria (padr√£o: 5)
    
    Returns:
        JSON com dados sobre servi√ßos, regi√µes, tipos de inst√¢ncia e contas descobertos (limitados)
    """
    print(f"CHAMANDO DISCOVER_ACCOUNT_RESOURCES - Limite: {limit}")
    try:
        cost_explorer = CostExplorer()
        
        # Descoberta de servi√ßos ativos
        services_response = cost_explorer.get_dimension_values(dimension='SERVICE')
        active_services = [item['Value'] for item in services_response['DimensionValues']]
        
        # Descoberta de regi√µes em uso
        regions_response = cost_explorer.get_dimension_values(dimension='REGION')
        active_regions = [item['Value'] for item in regions_response['DimensionValues']]
        
        # Descoberta de tipos de inst√¢ncia
        instances_response = cost_explorer.get_dimension_values(dimension='INSTANCE_TYPE')
        instance_types = [item['Value'] for item in instances_response['DimensionValues']]
        
        # Descoberta de contas vinculadas
        try:
            accounts_response = cost_explorer.get_dimension_values(dimension='LINKED_ACCOUNT')
            linked_accounts = [item['Value'] for item in accounts_response['DimensionValues']]
        except:
            linked_accounts = []
        
        # Descoberta de tipos de compra
        try:
            purchase_response = cost_explorer.get_dimension_values(dimension='PURCHASE_TYPE')
            purchase_types = [item['Value'] for item in purchase_response['DimensionValues']]
        except:
            purchase_types = []
        
        # Descoberta de sistemas operacionais
        try:
            os_response = cost_explorer.get_dimension_values(dimension='OPERATING_SYSTEM')
            operating_systems = [item['Value'] for item in os_response['DimensionValues']]
        except:
            operating_systems = []
        
        discovery_data = {
            "timestamp": datetime.now().isoformat(),
            "limit_applied": limit,
            "services": {
                "total_count": len(active_services),
                "list": active_services[:limit],
                "truncated": len(active_services) > limit
            },
            "regions": {
                "total_count": len(active_regions),
                "list": active_regions[:limit],
                "truncated": len(active_regions) > limit
            },
            "instance_types": {
                "total_count": len(instance_types),
                "list": instance_types[:limit],
                "truncated": len(instance_types) > limit
            },
            "linked_accounts": {
                "total_count": len(linked_accounts),
                "list": linked_accounts[:limit],
                "is_multi_account": len(linked_accounts) > 1,
                "truncated": len(linked_accounts) > limit
            },
            "purchase_types": {
                "total_count": len(purchase_types),
                "list": purchase_types[:limit],
                "truncated": len(purchase_types) > limit
            },
            "operating_systems": {
                "total_count": len(operating_systems),
                "list": operating_systems[:limit],
                "truncated": len(operating_systems) > limit
            }
        }
        
        return json.dumps(discovery_data, cls=JsonEncoder, ensure_ascii=False, indent=2)
        
    except Exception as e:
        return json.dumps({"error": f"Erro na descoberta de recursos: {str(e)}"}, ensure_ascii=False)


@tool
def validate_and_analyze_service(service_name: str) -> str:
    """
    Valida se um servi√ßo existe na conta e retorna an√°lise detalhada.
    
    Args:
        service_name: Nome do servi√ßo AWS a validar e analisar
        
    Returns:
        JSON com status de valida√ß√£o e dados do servi√ßo (se encontrado)
    """
    print("CHAMANDO VALIDATE_AND_ANALYZE_SERVICE", service_name)
    try:
        cost_explorer = CostExplorer()
        
        # Descobre servi√ßos dispon√≠veis
        services_response = cost_explorer.get_dimension_values(dimension='SERVICE')
        available_services = [item['Value'] for item in services_response['DimensionValues']]
        
        # Valida√ß√£o
        service_exists = service_name in available_services
        
        if not service_exists:
            # Busca servi√ßos similares
            similar_services = [s for s in available_services if service_name.lower() in s.lower()]
            
            return json.dumps({
                "service_name": service_name,
                "exists": False,
                "similar_services": similar_services,
                "all_available_services": available_services
            }, ensure_ascii=False, indent=2)
        
        # Se existe, coleta dados detalhados
        service_details = cost_explorer.get_service_details(service_name)
        
        # Descobre usage types relacionados
        usage_types_response = cost_explorer.get_dimension_values(dimension='USAGE_TYPE')
        all_usage_types = [item['Value'] for item in usage_types_response['DimensionValues']]
        
        # Filtra usage types que realmente t√™m custos para este servi√ßo
        service_usage_types = []
        for usage_type in all_usage_types[:50]:  # Limita para evitar muitas calls
            try:
                test_response = cost_explorer.client.get_cost_and_usage(
                    TimePeriod={
                        'Start': (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d'),
                        'End': datetime.now().strftime('%Y-%m-%d')
                    },
                    Granularity='DAILY',
                    Metrics=['UnblendedCost'],
                    Filter={
                        'And': [
                            {'Dimensions': {'Key': 'SERVICE', 'Values': [service_name]}},
                            {'Dimensions': {'Key': 'USAGE_TYPE', 'Values': [usage_type]}}
                        ]
                    }
                )
                
                # Verifica se h√° dados reais
                has_costs = any(
                    any(group.get('Metrics', {}).get('UnblendedCost', {}).get('Amount', '0') != '0' 
                        for group in period.get('Groups', []))
                    for period in test_response.get('ResultsByTime', [])
                )
                
                if has_costs:
                    service_usage_types.append(usage_type)
                    
            except:
                continue
        
        # Descobre regi√µes onde o servi√ßo tem custos
        service_regions = []
        try:
            regions_response = cost_explorer.get_dimension_values(dimension='REGION')
            for region_item in regions_response['DimensionValues']:
                region = region_item['Value']
                try:
                    region_test = cost_explorer.client.get_cost_and_usage(
                        TimePeriod={
                            'Start': (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d'),
                            'End': datetime.now().strftime('%Y-%m-%d')
                        },
                        Granularity='MONTHLY',
                        Metrics=['UnblendedCost'],
                        Filter={
                            'And': [
                                {'Dimensions': {'Key': 'SERVICE', 'Values': [service_name]}},
                                {'Dimensions': {'Key': 'REGION', 'Values': [region]}}
                            ]
                        }
                    )
                    
                    has_costs = any(
                        float(period.get('Total', {}).get('UnblendedCost', {}).get('Amount', '0')) > 0
                        for period in region_test.get('ResultsByTime', [])
                    )
                    
                    if has_costs:
                        service_regions.append(region)
                        
                except:
                    continue
        except:
            pass
        
        analysis_result = {
            "service_name": service_name,
            "exists": True,
            "service_details": service_details,
            "usage_types": {
                "count": len(service_usage_types),
                "list": service_usage_types
            },
            "regions": {
                "count": len(service_regions),
                "list": service_regions
            },
            "analysis_timestamp": datetime.now().isoformat()
        }
        
        return json.dumps(analysis_result, cls=JsonEncoder, ensure_ascii=False, indent=2)
        
    except Exception as e:
        return json.dumps({"error": f"Erro na valida√ß√£o do servi√ßo: {str(e)}"}, ensure_ascii=False)


@tool
def analyze_account_coverage() -> str:
    """
    Analisa a cobertura geral da conta AWS em diferentes dimens√µes.
    
    Returns:
        JSON com an√°lise completa de cobertura da conta
    """
    print("CHAMANDO ANALYZE_ACCOUNT_COVERAGE")
    try:
        cost_explorer = CostExplorer()
        
        coverage_data = {
            "analysis_timestamp": datetime.now().isoformat(),
            "dimensions_analysis": {}
        }
        
        # An√°lise de regi√µes
        try:
            regions_response = cost_explorer.get_dimension_values(dimension='REGION')
            regions_data = [item['Value'] for item in regions_response['DimensionValues']]
            coverage_data["dimensions_analysis"]["regions"] = {
                "total_count": len(regions_data),
                "list": regions_data,
                "is_multi_region": len(regions_data) > 1
            }
        except Exception as e:
            coverage_data["dimensions_analysis"]["regions"] = {"error": str(e)}
        
        # An√°lise de tipos de compra
        try:
            purchase_response = cost_explorer.get_dimension_values(dimension='PURCHASE_TYPE')
            purchase_data = [item['Value'] for item in purchase_response['DimensionValues']]
            coverage_data["dimensions_analysis"]["purchase_types"] = {
                "total_count": len(purchase_data),
                "list": purchase_data,
                "has_reserved": any('Reserved' in pt for pt in purchase_data),
                "has_savings_plans": any('Savings' in pt for pt in purchase_data),
                "has_ondemand": any('OnDemand' in pt for pt in purchase_data),
                "is_only_ondemand": purchase_data == ['OnDemand'] if purchase_data else False
            }
        except Exception as e:
            coverage_data["dimensions_analysis"]["purchase_types"] = {"error": str(e)}
        
        # An√°lise de tags
        try:
            tags_response = cost_explorer.get_tags()
            tags_data = tags_response.get('Tags', [])
            coverage_data["dimensions_analysis"]["tags"] = {
                "total_count": len(tags_data),
                "list": tags_data,
                "has_governance_tags": len(tags_data) > 0
            }
        except Exception as e:
            coverage_data["dimensions_analysis"]["tags"] = {"error": str(e)}
        
        # An√°lise de sistemas operacionais
        try:
            os_response = cost_explorer.get_dimension_values(dimension='OPERATING_SYSTEM')
            os_data = [item['Value'] for item in os_response['DimensionValues']]
            coverage_data["dimensions_analysis"]["operating_systems"] = {
                "total_count": len(os_data),
                "list": os_data,
                "has_windows": any('Windows' in os for os in os_data),
                "has_linux": any('Linux' in os for os in os_data),
                "is_mixed_environment": len(os_data) > 1
            }
        except Exception as e:
            coverage_data["dimensions_analysis"]["operating_systems"] = {"error": str(e)}
        
        # An√°lise de tipos de inst√¢ncia
        try:
            instances_response = cost_explorer.get_dimension_values(dimension='INSTANCE_TYPE')
            instances_data = [item['Value'] for item in instances_response['DimensionValues']]
            
            # Categoriza inst√¢ncias por gera√ß√£o
            legacy_instances = [inst for inst in instances_data if any(gen in inst for gen in ['t1.', 't2.', 'm1.', 'm3.', 'c1.', 'c3.'])]
            current_instances = [inst for inst in instances_data if inst not in legacy_instances]
            
            coverage_data["dimensions_analysis"]["instance_types"] = {
                "total_count": len(instances_data),
                "list": instances_data,
                "legacy_instances": {
                    "count": len(legacy_instances),
                    "list": legacy_instances
                },
                "current_instances": {
                    "count": len(current_instances),
                    "list": current_instances
                },
                "has_legacy": len(legacy_instances) > 0
            }
        except Exception as e:
            coverage_data["dimensions_analysis"]["instance_types"] = {"error": str(e)}
        
        # An√°lise de contas vinculadas
        try:
            accounts_response = cost_explorer.get_dimension_values(dimension='LINKED_ACCOUNT')
            accounts_data = [item['Value'] for item in accounts_response['DimensionValues']]
            coverage_data["dimensions_analysis"]["linked_accounts"] = {
                "total_count": len(accounts_data),
                "list": accounts_data,
                "is_organization": len(accounts_data) > 1
            }
        except Exception as e:
            coverage_data["dimensions_analysis"]["linked_accounts"] = {"error": str(e)}
        
        # An√°lise de engines de banco
        try:
            db_response = cost_explorer.get_dimension_values(dimension='DATABASE_ENGINE')
            db_data = [item['Value'] for item in db_response['DimensionValues']]
            coverage_data["dimensions_analysis"]["database_engines"] = {
                "total_count": len(db_data),
                "list": db_data,
                "has_databases": len(db_data) > 0
            }
        except Exception as e:
            coverage_data["dimensions_analysis"]["database_engines"] = {"error": str(e)}
        
        return json.dumps(coverage_data, cls=JsonEncoder, ensure_ascii=False, indent=2)
        
    except Exception as e:
        return json.dumps({"error": f"Erro na an√°lise de cobertura: {str(e)}"}, ensure_ascii=False)


@tool
def get_account_context_data() -> str:
    """
    Coleta dados contextuais abrangentes da conta AWS para an√°lise.
    
    Returns:
        JSON com contexto completo da conta para gera√ß√£o de insights
    """
    print("CHAMANDO GET_ACCOUNT_CONTEXT_DATA")
    try:
        cost_explorer = CostExplorer()
        analyzer = CostAnalyzer(cost_explorer)
        
        context_data = {
            "collection_timestamp": datetime.now().isoformat(),
            "cost_trends": {},
            "top_services": {},
            "dimension_summary": {},
            "usage_patterns": {}
        }
        
        # Tend√™ncias de custo
        try:
            trends = analyzer.get_cost_trends(months=6)
            context_data["cost_trends"] = trends
        except Exception as e:
            context_data["cost_trends"] = {"error": str(e)}
        
        # Top servi√ßos
        try:
            top_services = analyzer.get_top_services(limit=10)
            context_data["top_services"] = top_services
        except Exception as e:
            context_data["top_services"] = {"error": str(e)}
        
        # Resumo das principais dimens√µes
        dimensions_to_check = ['SERVICE', 'REGION', 'INSTANCE_TYPE', 'PURCHASE_TYPE', 'OPERATING_SYSTEM']
        
        for dimension in dimensions_to_check:
            try:
                response = cost_explorer.get_dimension_values(dimension=dimension)
                values = [item['Value'] for item in response['DimensionValues']]
                context_data["dimension_summary"][dimension.lower()] = {
                    "count": len(values),
                    "values": values[:20]  # Limita para evitar payloads muito grandes
                }
            except Exception as e:
                context_data["dimension_summary"][dimension.lower()] = {"error": str(e)}
        
        # Padr√µes de uso (√∫ltimos 30 dias)
        try:
            usage_response = cost_explorer.get_cost_by_service(
                start_date=(datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d'),
                end_date=datetime.now().strftime('%Y-%m-%d'),
                granularity='DAILY'
            )
            
            # Processa dados de uso
            daily_costs = []
            service_usage = {}
            
            for period in usage_response.get('ResultsByTime', []):
                period_total = 0
                period_date = period.get('TimePeriod', {}).get('Start', '')
                
                for group in period.get('Groups', []):
                    service = group.get('Keys', ['Unknown'])[0]
                    cost = float(group.get('Metrics', {}).get('UnblendedCost', {}).get('Amount', '0'))
                    
                    period_total += cost
                    
                    if service not in service_usage:
                        service_usage[service] = []
                    service_usage[service].append({
                        'date': period_date,
                        'cost': cost
                    })
                
                daily_costs.append({
                    'date': period_date,
                    'total_cost': period_total
                })
            
            context_data["usage_patterns"] = {
                "daily_costs": daily_costs[-7:],  # √öltimos 7 dias
                "service_trends": {k: v[-7:] for k, v in list(service_usage.items())[:5]}  # Top 5 services, √∫ltimos 7 dias
            }
            
        except Exception as e:
            context_data["usage_patterns"] = {"error": str(e)}
        
        return json.dumps(context_data, cls=JsonEncoder, ensure_ascii=False, indent=2)
        
    except Exception as e:
        return json.dumps({"error": f"Erro na coleta de dados contextuais: {str(e)}"}, ensure_ascii=False)


@tool
def check_account_data_availability() -> str:
    """
    Verifica se existem dados de custos dispon√≠veis na conta AWS e em que per√≠odos.
    
    Returns:
        JSON com informa√ß√µes sobre disponibilidade de dados hist√≥ricos
    """
    print("CHAMANDO CHECK_ACCOUNT_DATA_AVAILABILITY")
    try:
        cost_explorer = CostExplorer()
        
        # Per√≠odos para verificar (em dias atr√°s)
        periods_to_check = [7, 30, 90, 180, 365]
        data_availability = {
            "check_timestamp": datetime.now().isoformat(),
            "periods_checked": [],
            "has_any_data": False,
            "recommended_period": None,
            "suggestions": []
        }
        
        for days in periods_to_check:
            start_date = (datetime.now() - timedelta(days=days)).strftime('%Y-%m-%d')
            end_date = datetime.now().strftime('%Y-%m-%d')
            
            try:
                # Tenta buscar dados gerais de custo
                response = cost_explorer.client.get_cost_and_usage(
                    TimePeriod={'Start': start_date, 'End': end_date},
                    Granularity='MONTHLY',
                    Metrics=['UnblendedCost']
                )
                
                total_cost = 0
                for period in response.get('ResultsByTime', []):
                    cost = float(period.get('Total', {}).get('UnblendedCost', {}).get('Amount', '0'))
                    total_cost += cost
                
                period_info = {
                    "days": days,
                    "start_date": start_date,
                    "end_date": end_date,
                    "total_cost": total_cost,
                    "has_data": total_cost > 0
                }
                
                data_availability["periods_checked"].append(period_info)
                
                if total_cost > 0 and not data_availability["has_any_data"]:
                    data_availability["has_any_data"] = True
                    data_availability["recommended_period"] = days
                
            except Exception as e:
                period_info = {
                    "days": days,
                    "start_date": start_date,
                    "end_date": end_date,
                    "error": str(e)
                }
                data_availability["periods_checked"].append(period_info)
        
        # Gerar sugest√µes baseadas nos resultados
        if not data_availability["has_any_data"]:
            data_availability["suggestions"] = [
                "Esta conta AWS pode ser nova ou n√£o ter custos registrados ainda",
                "Verifique se h√° recursos ativos usando discovery tools",
                "Configure billing alerts para monitorar custos futuros",
                "Considere implementar tagging para melhor organiza√ß√£o"
            ]
        else:
            data_availability["suggestions"] = [
                f"Use per√≠odo de {data_availability['recommended_period']} dias para an√°lises",
                "Configure tags para melhor categoriza√ß√£o de custos",
                "Implemente pol√≠ticas de cost optimization"
            ]
        
        return json.dumps(data_availability, cls=JsonEncoder, ensure_ascii=False, indent=2)
        
    except Exception as e:
        return json.dumps({"error": f"Erro na verifica√ß√£o de dados: {str(e)}"}, ensure_ascii=False)


@tool
def aws_ec2_call(method: str, instance_ids: Optional[str] = None, volume_ids: Optional[str] = None, 
                 vpc_ids: Optional[str] = None, subnet_ids: Optional[str] = None, 
                 group_ids: Optional[str] = None, region_name: Optional[str] = None, limit: int = 5) -> str:
    """
    Executa chamadas din√¢micas para EC2 e outros servi√ßos AWS baseado no m√©todo solicitado.
    
    Args:
        method: M√©todo da API AWS a ser executado
        instance_ids: IDs de inst√¢ncias EC2 (separados por v√≠rgula, opcional)
        volume_ids: IDs de volumes EBS (separados por v√≠rgula, opcional)
        vpc_ids: IDs de VPCs (separados por v√≠rgula, opcional)
        subnet_ids: IDs de subnets (separados por v√≠rgula, opcional)
        group_ids: IDs de security groups (separados por v√≠rgula, opcional)
        region_name: Regi√£o AWS espec√≠fica (opcional)
        limit: N√∫mero m√°ximo de recursos a retornar (padr√£o: 5)
        
    Returns:
        JSON com a resposta da API AWS correspondente ao m√©todo solicitado (limitado)
        
    Exemplos:
    - aws_ec2_call("describe_instances", limit=10)
    - aws_ec2_call("describe_volumes", volume_ids="vol-123,vol-456")
    - aws_ec2_call("describe_load_balancers", limit=3)  # Ser√° redirecionado para ELBv2
    """
    print(f"AWS EC2 CALL - M√©todo: {method}, Limite: {limit}")
    
    # Preparar par√¢metros din√¢micos baseados no m√©todo
    parameters = {}
    
    if instance_ids:
        parameters['InstanceIds'] = [id.strip() for id in instance_ids.split(',')]
    if volume_ids:
        parameters['VolumeIds'] = [id.strip() for id in volume_ids.split(',')]
    if vpc_ids:
        parameters['VpcIds'] = [id.strip() for id in vpc_ids.split(',')]
    if subnet_ids:
        parameters['SubnetIds'] = [id.strip() for id in subnet_ids.split(',')]
    if group_ids:
        parameters['GroupIds'] = [id.strip() for id in group_ids.split(',')]
    
    # M√©todos permitidos para EC2
    EC2_METHODS = {
        # Inst√¢ncias 
        'describe_instances',
        'describe_instance_status',
        'describe_instance_types',
        
        # Volumes e storage
        'describe_volumes',
        'describe_snapshots',
        'describe_images',
        
        # Networking
        'describe_vpcs',
        'describe_subnets',
        'describe_security_groups',
        'describe_network_interfaces',
        'describe_route_tables',
        'describe_internet_gateways',
        'describe_nat_gateways',
        'describe_vpc_peering_connections',
        'describe_addresses',
        'describe_network_acls',
        'describe_vpc_endpoints',
        'describe_customer_gateways',
        'describe_vpn_gateways',
        'describe_vpn_connections',
        
        # Key pairs
        'describe_key_pairs',
        
        # Regions and AZs
        'describe_regions',
        'describe_availability_zones',
        
        # Tags
        'describe_tags',
        
        # Billing e usage
        'describe_account_attributes',
        'describe_instance_credit_specifications'
    }
    
    # M√©todos permitidos para ELBv2 (Load Balancers)
    ELB_METHODS = {
        'describe_load_balancers',
        'describe_target_groups',
        'describe_listeners',
        'describe_target_health'
    }
    
    # Determinar qual cliente usar
    if method in EC2_METHODS:
        client_type = 'ec2'
        allowed_methods = EC2_METHODS
    elif method in ELB_METHODS:
        client_type = 'elbv2'
        allowed_methods = ELB_METHODS
    else:
        return json.dumps({
            "error": f"M√©todo '{method}' n√£o reconhecido",
            "ec2_methods": sorted(list(EC2_METHODS)),
            "elb_methods": sorted(list(ELB_METHODS))
        }, ensure_ascii=False, indent=2)

    try:
        cost_explorer = CostExplorer()
        
        # Criar o cliente apropriado usando a mesma sess√£o do Cost Explorer
        session = cost_explorer.aws_client.session
        aws_client = session.client(client_type)
        
        # Remove par√¢metros vazios para evitar erros
        clean_parameters = {k: v for k, v in parameters.items() if v is not None and v != []}
        
        print(f"{client_type.upper()} Call - Executing: {method} with params: {clean_parameters}")
        
        # Executa o m√©todo dinamicamente
        aws_method = getattr(aws_client, method)
        response = aws_method(**clean_parameters)
        
        # Debug: verificar se h√° dados
        print(f"{client_type.upper()} Call - Raw response keys: {list(response.keys())}")
        
        # Debug espec√≠fico para cada tipo de cliente
        if client_type == 'ec2':
            if method == 'describe_instances' and 'Reservations' in response:
                print(f"EC2 Call - Found {len(response['Reservations'])} reservations")
                total_instances = sum(len(res.get('Instances', [])) for res in response['Reservations'])
                print(f"EC2 Call - Total instances: {total_instances}")
            elif method == 'describe_volumes' and 'Volumes' in response:
                print(f"EC2 Call - Found {len(response['Volumes'])} volumes")
            elif method == 'describe_addresses' and 'Addresses' in response:
                print(f"EC2 Call - Found {len(response['Addresses'])} addresses")
        elif client_type == 'elbv2':
            if method == 'describe_load_balancers' and 'LoadBalancers' in response:
                print(f"ELB Call - Found {len(response['LoadBalancers'])} load balancers")
            elif method == 'describe_target_groups' and 'TargetGroups' in response:
                print(f"ELB Call - Found {len(response['TargetGroups'])} target groups")
        
        # Remove ResponseMetadata para limpar o output
        if 'ResponseMetadata' in response:
            del response['ResponseMetadata']
        
        # Aplicar limita√ß√£o aos recursos retornados
        original_response = response.copy()
        total_resources = 0
        truncated = False
        
        if client_type == 'ec2':
            if method == 'describe_instances' and 'Reservations' in response:
                # Para inst√¢ncias, limitar o n√∫mero total de inst√¢ncias
                limited_reservations = []
                instances_count = 0
                
                for reservation in response['Reservations']:
                    if instances_count >= limit:
                        truncated = True
                        break
                    
                    limited_instances = []
                    for instance in reservation.get('Instances', []):
                        if instances_count >= limit:
                            truncated = True
                            break
                        limited_instances.append(instance)
                        instances_count += 1
                    
                    if limited_instances:
                        limited_reservation = reservation.copy()
                        limited_reservation['Instances'] = limited_instances
                        limited_reservations.append(limited_reservation)
                
                total_resources = sum(len(res.get('Instances', [])) for res in original_response['Reservations'])
                response['Reservations'] = limited_reservations
                
            elif method == 'describe_volumes' and 'Volumes' in response:
                total_resources = len(response['Volumes'])
                response['Volumes'] = response['Volumes'][:limit]
                truncated = total_resources > limit
                
            elif method == 'describe_addresses' and 'Addresses' in response:
                total_resources = len(response['Addresses'])
                response['Addresses'] = response['Addresses'][:limit]
                truncated = total_resources > limit
                
            elif method == 'describe_vpcs' and 'Vpcs' in response:
                total_resources = len(response['Vpcs'])
                response['Vpcs'] = response['Vpcs'][:limit]
                truncated = total_resources > limit
                
            elif method == 'describe_subnets' and 'Subnets' in response:
                total_resources = len(response['Subnets'])
                response['Subnets'] = response['Subnets'][:limit]
                truncated = total_resources > limit
                
            elif method == 'describe_security_groups' and 'SecurityGroups' in response:
                total_resources = len(response['SecurityGroups'])
                response['SecurityGroups'] = response['SecurityGroups'][:limit]
                truncated = total_resources > limit
                
        elif client_type == 'elbv2':
            if method == 'describe_load_balancers' and 'LoadBalancers' in response:
                total_resources = len(response['LoadBalancers'])
                response['LoadBalancers'] = response['LoadBalancers'][:limit]
                truncated = total_resources > limit
                
            elif method == 'describe_target_groups' and 'TargetGroups' in response:
                total_resources = len(response['TargetGroups'])
                response['TargetGroups'] = response['TargetGroups'][:limit]
                truncated = total_resources > limit
        
        # Adicionar metadados sobre limita√ß√£o
        response['_meta'] = {
            'limit_applied': limit,
            'total_resources_found': total_resources,
            'resources_returned': min(total_resources, limit),
            'truncated': truncated,
            'method': method,
            'client_type': client_type
        }
        
        # Verificar se h√° dados √∫teis na resposta
        has_data = False
        if client_type == 'ec2':
            if method == 'describe_instances' and response.get('Reservations'):
                has_data = any(res.get('Instances', []) for res in response['Reservations'])
            elif method == 'describe_volumes' and response.get('Volumes'):
                has_data = len(response['Volumes']) > 0
            elif method == 'describe_addresses' and response.get('Addresses'):
                has_data = len(response['Addresses']) > 0
            elif method in ['describe_vpcs', 'describe_subnets', 'describe_security_groups'] and response:
                # Para estes m√©todos, verificar se h√° dados nas chaves principais
                main_key = {
                    'describe_vpcs': 'Vpcs',
                    'describe_subnets': 'Subnets', 
                    'describe_security_groups': 'SecurityGroups'
                }.get(method)
                has_data = bool(response.get(main_key, []))
            else:
                # Para outros m√©todos, assumir que h√° dados se a resposta n√£o est√° vazia
                has_data = bool(response and len(response) > 0)
        elif client_type == 'elbv2':
            if method == 'describe_load_balancers' and response.get('LoadBalancers'):
                has_data = len(response['LoadBalancers']) > 0
            elif method == 'describe_target_groups' and response.get('TargetGroups'):
                has_data = len(response['TargetGroups']) > 0
            else:
                has_data = bool(response and len(response) > 0)
        
        if not has_data:
            print(f"{client_type.upper()} Call - Warning: No data returned for {method}")
            response['_meta'] = {
                'warning': f'Nenhum dado encontrado para {method}',
                'possible_reasons': [
                    'N√£o h√° recursos deste tipo na conta',
                    'Recursos podem estar em outras regi√µes',
                    'Permiss√µes IAM podem estar limitadas',
                    'Recursos podem ter sido filtrados'
                ]
            }
            
        print(f"{client_type.upper()} Call - Success: {method} (has_data: {has_data})")
        return json.dumps(response, cls=JsonEncoder, ensure_ascii=False, indent=2)
        
    except AttributeError as e:
        import traceback
        tb = traceback.format_exc()
        print(f"{client_type.upper()} Call - AttributeError: {e}")
        print(f"{client_type.upper()} Call - Traceback:\n{tb}")
        return json.dumps({
            "error": f"M√©todo '{method}' n√£o existe no cliente {client_type}",
            "details": str(e),
            "client_type": client_type,
            "traceback": tb,
            "suggestion": f"Verifique se o m√©todo {method} est√° dispon√≠vel no servi√ßo {client_type}"
        }, ensure_ascii=False, indent=2)
        
    except Exception as e:
        import traceback
        tb = traceback.format_exc()
        error_msg = str(e)
        print(f"{client_type.upper()} Call - Error: {error_msg}")
        print(f"{client_type.upper()} Call - Traceback:\n{tb}")
        
        # Tratamento de erros espec√≠ficos com informa√ß√µes detalhadas
        if "InvalidParameterValue" in error_msg:
            return json.dumps({
                "error": "Par√¢metros inv√°lidos fornecidos",
                "details": error_msg,
                "suggestion": "Verifique os par√¢metros e tente novamente",
                "client_type": client_type,
                "traceback": tb
            }, ensure_ascii=False, indent=2)
        elif "UnauthorizedOperation" in error_msg:
            return json.dumps({
                "error": "Opera√ß√£o n√£o autorizada",
                "details": error_msg,
                "suggestion": f"Verifique as permiss√µes IAM para {client_type}",
                "client_type": client_type,
                "traceback": tb
            }, ensure_ascii=False, indent=2)
        elif "InvalidInstanceID" in error_msg:
            return json.dumps({
                "error": "ID de inst√¢ncia inv√°lido",
                "details": error_msg,
                "suggestion": "Verifique se o ID da inst√¢ncia existe e est√° correto",
                "client_type": client_type,
                "traceback": tb
            }, ensure_ascii=False, indent=2)
        else:
            return json.dumps({
                "error": f"Erro ao executar {method}",
                "details": error_msg,
                "client_type": client_type,
                "traceback": tb,
                "method": method,
                "parameters": parameters
            }, ensure_ascii=False, indent=2)


@tool
def get_instance_cost_by_name(instance_name: str, start_date: Optional[str] = None, end_date: Optional[str] = None) -> str:
    """
    Busca o custo de uma inst√¢ncia EC2 espec√≠fica pelo nome, usando correla√ß√£o com tags.
    
    Args:
        instance_name: Nome da inst√¢ncia (valor da tag 'Name')
        start_date: Data inicial no formato YYYY-MM-DD (opcional)
        end_date: Data final no formato YYYY-MM-DD (opcional)
        
    Returns:
        JSON com detalhes da inst√¢ncia e estimativa de custo baseada em tags
        
    Exemplos:
    - get_instance_cost_by_name("Valhalla")
    - get_instance_cost_by_name("WebServer-Prod")
    """
    print(f"BUSCANDO CUSTO DA INST√ÇNCIA: {instance_name}")
    
    try:
        # 1. Buscar a inst√¢ncia pelo nome
        cost_explorer = CostExplorer()
        session = cost_explorer.aws_client.session
        ec2_client = session.client('ec2')
        
        # Buscar inst√¢ncias com filtro por tag Name
        print(f"Buscando inst√¢ncia com nome: {instance_name}")
        instances_response = ec2_client.describe_instances(
            Filters=[
                {
                    'Name': 'tag:Name',
                    'Values': [instance_name]
                },
                {
                    'Name': 'instance-state-name',
                    'Values': ['running', 'stopped']  # Excluir inst√¢ncias terminadas
                }
            ]
        )
        
        # Processar resultados
        found_instances = []
        for reservation in instances_response.get('Reservations', []):
            for instance in reservation.get('Instances', []):
                found_instances.append(instance)
        
        if not found_instances:
            return json.dumps({
                "error": f"Inst√¢ncia com nome '{instance_name}' n√£o encontrada",
                "suggestion": "Verifique se o nome est√° correto e se a inst√¢ncia existe",
                "searched_name": instance_name
            }, ensure_ascii=False, indent=2)
        
        # Se encontrou m√∫ltiplas inst√¢ncias com o mesmo nome
        if len(found_instances) > 1:
            instances_info = []
            for instance in found_instances:
                instances_info.append({
                    "instance_id": instance.get('InstanceId'),
                    "state": instance.get('State', {}).get('Name'),
                    "instance_type": instance.get('InstanceType'),
                    "availability_zone": instance.get('Placement', {}).get('AvailabilityZone')
                })
            
            return json.dumps({
                "warning": f"Encontradas {len(found_instances)} inst√¢ncias com nome '{instance_name}'",
                "instances": instances_info,
                "suggestion": "Use o Instance ID espec√≠fico para an√°lise mais precisa"
            }, ensure_ascii=False, indent=2)
        
        # Processar a inst√¢ncia encontrada
        instance = found_instances[0]
        instance_id = instance.get('InstanceId')
        instance_type = instance.get('InstanceType')
        state = instance.get('State', {}).get('Name')
        availability_zone = instance.get('Placement', {}).get('AvailabilityZone')
        
        # 2. Extrair tags da inst√¢ncia
        instance_tags = {}
        cost_relevant_tags = []
        
        for tag in instance.get('Tags', []):
            key = tag.get('Key')
            value = tag.get('Value')
            instance_tags[key] = value
            
            # Tags relevantes para an√°lise de custo (excluir tags da AWS)
            if not key.startswith('aws:'):
                cost_relevant_tags.append({"key": key, "value": value})
        
        print(f"Inst√¢ncia encontrada: {instance_id} ({instance_type}) - Tags: {len(cost_relevant_tags)}")
        
        # 3. Buscar custos por tags relevantes
        cost_analysis = {
            "total_estimated_cost_usd": 0,
            "total_estimated_cost_brl": 0,
            "tag_based_costs": [],
            "estimation_method": "tag_correlation"
        }
        
        # Definir per√≠odo de an√°lise
        if not end_date:
            end_date = datetime.now().strftime('%Y-%m-%d')
        if not start_date:
            start_date = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
        
        # Buscar custos por cada tag relevante
        for tag_info in cost_relevant_tags:
            tag_key = tag_info["key"]
            tag_value = tag_info["value"]
            
            try:
                # Buscar custos por esta tag espec√≠fica
                tag_cost_response = cost_explorer.get_cost_by_tag(tag_key, start_date, end_date)
                
                tag_total_cost = 0
                matching_cost = 0
                
                for period in tag_cost_response.get('ResultsByTime', []):
                    for group in period.get('Groups', []):
                        group_tag_value = group.get('Keys', [''])[0]
                        cost_usd = float(group.get('Metrics', {}).get('UnblendedCost', {}).get('Amount', '0'))
                        
                        # Limpar valor da tag (remover prefixos se houver)
                        if '$' in group_tag_value:
                            group_tag_value = group_tag_value.split('$')[-1]
                        group_tag_value = group_tag_value.rstrip('$')
                        
                        tag_total_cost += cost_usd
                        
                        # Se o valor da tag corresponde exatamente
                        if group_tag_value == tag_value:
                            matching_cost += cost_usd
                
                if matching_cost > 0:
                    cost_analysis["tag_based_costs"].append({
                        "tag_key": tag_key,
                        "tag_value": tag_value,
                        "cost_usd": matching_cost,
                        "cost_brl": matching_cost * cost_explorer.get_exchange_rate() if hasattr(cost_explorer, 'get_exchange_rate') else matching_cost * 5.5,
                        "period_days": (datetime.strptime(end_date, '%Y-%m-%d') - datetime.strptime(start_date, '%Y-%m-%d')).days
                    })
                    
                    print(f"Tag {tag_key}={tag_value}: ${matching_cost:.2f}")
                
            except Exception as e:
                print(f"Erro ao buscar custo para tag {tag_key}: {e}")
                continue
        
        # 4. Calcular estimativa de custo total
        if cost_analysis["tag_based_costs"]:
            # Se temos custos por tags, usar o maior valor (mais espec√≠fico)
            max_cost_entry = max(cost_analysis["tag_based_costs"], key=lambda x: x["cost_usd"])
            cost_analysis["total_estimated_cost_usd"] = max_cost_entry["cost_usd"]
            cost_analysis["total_estimated_cost_brl"] = max_cost_entry["cost_brl"]
            cost_analysis["primary_cost_tag"] = f"{max_cost_entry['tag_key']}={max_cost_entry['tag_value']}"
        else:
            # Fallback: estimar com base no tipo de inst√¢ncia
            try:
                service_details = cost_explorer.get_service_details('Amazon Elastic Compute Cloud - Compute', start_date, end_date)
                
                for period in service_details.get('ResultsByTime', []):
                    for group in period.get('Groups', []):
                        usage_type = group.get('Keys', [''])[0]
                        if instance_type in usage_type or availability_zone.replace('-', '') in usage_type:
                            cost_usd = float(group.get('Metrics', {}).get('UnblendedCost', {}).get('Amount', '0'))
                            if cost_usd > 0:
                                cost_analysis["total_estimated_cost_usd"] = cost_usd
                                cost_analysis["total_estimated_cost_brl"] = cost_usd * 5.5
                                cost_analysis["estimation_method"] = "instance_type_correlation"
                                break
                
            except Exception as e:
                print(f"Erro na estimativa por tipo de inst√¢ncia: {e}")
        
        # 5. Montar resposta final
        result = {
            "instance_name": instance_name,
            "instance_details": {
                "instance_id": instance_id,
                "instance_type": instance_type,
                "state": state,
                "availability_zone": availability_zone,
                "tags": instance_tags
            },
            "cost_analysis": cost_analysis,
            "analysis_period": {
                "start_date": start_date,
                "end_date": end_date,
                "days": (datetime.strptime(end_date, '%Y-%m-%d') - datetime.strptime(start_date, '%Y-%m-%d')).days
            },
            "recommendations": []
        }
        
        # 6. Adicionar recomenda√ß√µes
        if cost_analysis["total_estimated_cost_usd"] == 0:
            result["recommendations"].append("N√£o foi poss√≠vel estimar o custo atrav√©s das tags. Considere implementar tags mais espec√≠ficas para esta inst√¢ncia.")
        
        if state == 'stopped':
            result["recommendations"].append("Esta inst√¢ncia est√° parada, mas ainda pode ter custos de armazenamento EBS.")
        
        if not cost_relevant_tags:
            result["recommendations"].append("Esta inst√¢ncia n√£o possui tags de governan√ßa. Adicione tags como Environment, Project, Owner para melhor rastreamento de custos.")
        
        print(f"An√°lise conclu√≠da para {instance_name}: ${cost_analysis['total_estimated_cost_usd']:.2f}")
        
        return json.dumps(result, cls=JsonEncoder, ensure_ascii=False, indent=2)
        
    except Exception as e:
        import traceback
        tb = traceback.format_exc()
        print(f"Erro na an√°lise de custo da inst√¢ncia: {e}")
        print(f"Traceback:\n{tb}")
        
        return json.dumps({
            "error": f"Erro ao analisar custo da inst√¢ncia '{instance_name}'",
            "details": str(e),
            "traceback": tb,
            "suggestion": "Verifique se a inst√¢ncia existe e se voc√™ tem permiss√µes adequadas"
        }, ensure_ascii=False, indent=2)


@tool
def find_instances_by_tag(tag_key: str, tag_value: str = None, limit: int = 5) -> str:
    """
    Busca inst√¢ncias EC2 por uma tag espec√≠fica ou lista todas as inst√¢ncias com uma determinada tag.
    
    Args:
        tag_key: Chave da tag (ex: 'Name', 'Environment', 'Project')
        tag_value: Valor da tag (opcional). Se n√£o fornecido, lista todos os valores para essa tag
        limit: N√∫mero m√°ximo de inst√¢ncias a retornar (padr√£o: 5)
        
    Returns:
        JSON com inst√¢ncias encontradas e suas informa√ß√µes b√°sicas (limitado)
        
    Exemplos:
    - find_instances_by_tag("Name", "Valhalla")
    - find_instances_by_tag("Environment", "production", limit=10)
    - find_instances_by_tag("Project", limit=3)  # Lista at√© 3 inst√¢ncias com tag Project
    """
    print(f"BUSCANDO INST√ÇNCIAS POR TAG: {tag_key}={tag_value or '*'} - Limite: {limit}")
    
    try:
        cost_explorer = CostExplorer()
        session = cost_explorer.aws_client.session
        ec2_client = session.client('ec2')
        
        # Preparar filtros
        filters = [
            {
                'Name': 'instance-state-name',
                'Values': ['running', 'stopped', 'stopping', 'starting']  # Excluir apenas terminated
            }
        ]
        
        # Adicionar filtro por tag
        if tag_value:
            filters.append({
                'Name': f'tag:{tag_key}',
                'Values': [tag_value]
            })
        else:
            # Buscar todas as inst√¢ncias que t√™m essa tag (independente do valor)
            filters.append({
                'Name': f'tag-key',
                'Values': [tag_key]
            })
        
        print(f"Aplicando filtros: {filters}")
        instances_response = ec2_client.describe_instances(Filters=filters)
        
        # Processar resultados
        instances_info = []
        tag_values_found = set()
        total_instances_found = 0
        
        for reservation in instances_response.get('Reservations', []):
            for instance in reservation.get('Instances', []):
                total_instances_found += 1
                
                # Aplicar limite
                if len(instances_info) >= limit:
                    continue
                
                # Extrair informa√ß√µes b√°sicas
                instance_id = instance.get('InstanceId')
                instance_type = instance.get('InstanceType')
                state = instance.get('State', {}).get('Name')
                availability_zone = instance.get('Placement', {}).get('AvailabilityZone')
                launch_time = instance.get('LaunchTime')
                
                # Processar tags
                instance_tags = {}
                target_tag_value = None
                
                for tag in instance.get('Tags', []):
                    key = tag.get('Key')
                    value = tag.get('Value')
                    instance_tags[key] = value
                    
                    if key == tag_key:
                        target_tag_value = value
                        tag_values_found.add(value)
                
                # Informa√ß√µes da inst√¢ncia
                instance_info = {
                    "instance_id": instance_id,
                    "instance_type": instance_type,
                    "state": state,
                    "availability_zone": availability_zone,
                    "launch_time": launch_time.isoformat() if launch_time else None,
                    "target_tag_value": target_tag_value,
                    "all_tags": instance_tags
                }
                
                instances_info.append(instance_info)
        
        # Montar resposta
        result = {
            "search_criteria": {
                "tag_key": tag_key,
                "tag_value": tag_value,
                "search_type": "specific_value" if tag_value else "all_values",
                "limit_applied": limit
            },
            "results_summary": {
                "total_instances_found": total_instances_found,
                "instances_returned": len(instances_info),
                "truncated": total_instances_found > limit,
                "unique_tag_values": list(tag_values_found) if not tag_value else None
            },
            "instances": instances_info
        }
        
        # Adicionar insights
        if not instances_info:
            result["message"] = f"Nenhuma inst√¢ncia encontrada com a tag '{tag_key}'" + (f"='{tag_value}'" if tag_value else "")
            result["suggestions"] = [
                f"Verifique se a tag '{tag_key}' existe nas suas inst√¢ncias",
                "Use find_instances_by_tag(tag_key) para ver todos os valores dispon√≠veis para esta tag"
            ]
        elif not tag_value and len(tag_values_found) > 1:
            result["insights"] = [
                f"Encontrados {len(tag_values_found)} valores diferentes para a tag '{tag_key}'",
                "Use um valor espec√≠fico para an√°lise mais precisa de custos"
            ]
        
        print(f"Busca conclu√≠da: {len(instances_info)} inst√¢ncias encontradas")
        
        return json.dumps(result, cls=JsonEncoder, ensure_ascii=False, indent=2)
        
    except Exception as e:
        import traceback
        tb = traceback.format_exc()
        print(f"Erro na busca de inst√¢ncias por tag: {e}")
        print(f"Traceback:\n{tb}")
        
        return json.dumps({
            "error": f"Erro ao buscar inst√¢ncias pela tag '{tag_key}'",
            "details": str(e),
            "traceback": tb,
            "suggestion": "Verifique se voc√™ tem permiss√µes para listar inst√¢ncias EC2"
        }, ensure_ascii=False, indent=2)


@tool
def audit_governance_tags() -> str:
    """
    Auditoria otimizada de recursos sem tags de governan√ßa adequadas.
    Retorna resumo eficiente focando apenas em recursos sem tags cr√≠ticas.
    
    Returns:
        JSON compacto com auditoria de governan√ßa por tipo de recurso
        
    Exemplo de uso:
    - audit_governance_tags() - Mostra recursos sem tags de governan√ßa
    """
    print("INICIANDO AUDITORIA DE GOVERNAN√áA OTIMIZADA")
    
    try:
        cost_explorer = CostExplorer()
        session = cost_explorer.aws_client.session
        ec2_client = session.client('ec2')
        
        # Tags cr√≠ticas de governan√ßa
        governance_tags = ['Environment', 'Project', 'Owner', 'Team', 'CostCenter', 'Application']
        
        audit_result = {
            "audit_timestamp": datetime.now().isoformat(),
            "governance_tags_checked": governance_tags,
            "summary": {
                "total_resources_audited": 0,
                "resources_without_governance": 0,
                "compliance_percentage": 0
            },
            "resources_audit": {}
        }
        
        # 1. Auditoria de Inst√¢ncias EC2 (resumida)
        print("Auditando inst√¢ncias EC2...")
        try:
            instances_response = ec2_client.describe_instances(
                Filters=[
                    {
                        'Name': 'instance-state-name',
                        'Values': ['running', 'stopped']
                    }
                ]
            )
            
            instances_without_governance = []
            total_instances = 0
            
            for reservation in instances_response.get('Reservations', []):
                for instance in reservation.get('Instances', []):
                    total_instances += 1
                    instance_id = instance.get('InstanceId')
                    instance_type = instance.get('InstanceType')
                    state = instance.get('State', {}).get('Name')
                    
                    # Verificar tags de governan√ßa
                    instance_tags = {tag['Key']: tag['Value'] for tag in instance.get('Tags', [])}
                    
                    # Verificar se tem pelo menos uma tag de governan√ßa
                    has_governance_tag = any(tag in instance_tags for tag in governance_tags)
                    
                    if not has_governance_tag:
                        instances_without_governance.append({
                            "resource_id": instance_id,
                            "type": instance_type,
                            "state": state,
                            "existing_tags": list(instance_tags.keys())[:3],  # M√°ximo 3 tags para economizar tokens
                            "missing_governance_tags": governance_tags
                        })
            
            audit_result["resources_audit"]["ec2_instances"] = {
                "total_count": total_instances,
                "without_governance_count": len(instances_without_governance),
                "compliance_rate": f"{((total_instances - len(instances_without_governance)) / total_instances * 100):.1f}%" if total_instances > 0 else "0%",
                "non_compliant_resources": instances_without_governance[:10]  # Limitar a 10 recursos
            }
            
            audit_result["summary"]["total_resources_audited"] += total_instances
            audit_result["summary"]["resources_without_governance"] += len(instances_without_governance)
            
        except Exception as e:
            print(f"Erro na auditoria de inst√¢ncias: {e}")
            audit_result["resources_audit"]["ec2_instances"] = {"error": str(e)}
        
        # 2. Auditoria de Volumes EBS (resumida)
        print("Auditando volumes EBS...")
        try:
            volumes_response = ec2_client.describe_volumes()
            
            volumes_without_governance = []
            total_volumes = len(volumes_response.get('Volumes', []))
            
            for volume in volumes_response.get('Volumes', []):
                volume_id = volume.get('VolumeId')
                volume_size = volume.get('Size')
                volume_state = volume.get('State')
                
                # Verificar tags de governan√ßa
                volume_tags = {tag['Key']: tag['Value'] for tag in volume.get('Tags', [])}
                has_governance_tag = any(tag in volume_tags for tag in governance_tags)
                
                if not has_governance_tag:
                    volumes_without_governance.append({
                        "resource_id": volume_id,
                        "size_gb": volume_size,
                        "state": volume_state,
                        "existing_tags": list(volume_tags.keys())[:2],  # M√°ximo 2 tags
                        "is_attached": len(volume.get('Attachments', [])) > 0
                    })
            
            audit_result["resources_audit"]["ebs_volumes"] = {
                "total_count": total_volumes,
                "without_governance_count": len(volumes_without_governance),
                "compliance_rate": f"{((total_volumes - len(volumes_without_governance)) / total_volumes * 100):.1f}%" if total_volumes > 0 else "0%",
                "non_compliant_resources": volumes_without_governance[:5]  # Limitar a 5 volumes
            }
            
            audit_result["summary"]["total_resources_audited"] += total_volumes
            audit_result["summary"]["resources_without_governance"] += len(volumes_without_governance)
            
        except Exception as e:
            print(f"Erro na auditoria de volumes: {e}")
            audit_result["resources_audit"]["ebs_volumes"] = {"error": str(e)}
        
        # 3. Auditoria de Elastic IPs (resumida)
        print("Auditando Elastic IPs...")
        try:
            addresses_response = ec2_client.describe_addresses()
            
            addresses_without_governance = []
            total_addresses = len(addresses_response.get('Addresses', []))
            
            for address in addresses_response.get('Addresses', []):
                allocation_id = address.get('AllocationId')
                public_ip = address.get('PublicIp')
                is_associated = 'AssociationId' in address
                
                # Verificar tags de governan√ßa
                address_tags = {tag['Key']: tag['Value'] for tag in address.get('Tags', [])}
                has_governance_tag = any(tag in address_tags for tag in governance_tags)
                
                if not has_governance_tag:
                    addresses_without_governance.append({
                        "resource_id": allocation_id or public_ip,
                        "public_ip": public_ip,
                        "is_associated": is_associated,
                        "existing_tags": list(address_tags.keys())[:2]
                    })
            
            audit_result["resources_audit"]["elastic_ips"] = {
                "total_count": total_addresses,
                "without_governance_count": len(addresses_without_governance),
                "compliance_rate": f"{((total_addresses - len(addresses_without_governance)) / total_addresses * 100):.1f}%" if total_addresses > 0 else "0%",
                "non_compliant_resources": addresses_without_governance[:5]  # Limitar a 5 IPs
            }
            
            audit_result["summary"]["total_resources_audited"] += total_addresses
            audit_result["summary"]["resources_without_governance"] += len(addresses_without_governance)
            
        except Exception as e:
            print(f"Erro na auditoria de Elastic IPs: {e}")
            audit_result["resources_audit"]["elastic_ips"] = {"error": str(e)}
        
        # Calcular compliance geral
        if audit_result["summary"]["total_resources_audited"] > 0:
            compliance_rate = ((audit_result["summary"]["total_resources_audited"] - audit_result["summary"]["resources_without_governance"]) / 
                             audit_result["summary"]["total_resources_audited"]) * 100
            audit_result["summary"]["compliance_percentage"] = f"{compliance_rate:.1f}%"
        
        # Adicionar recomenda√ß√µes
        audit_result["recommendations"] = []
        
        if audit_result["summary"]["resources_without_governance"] > 0:
            audit_result["recommendations"].extend([
                f"Implementar tags de governan√ßa em {audit_result['summary']['resources_without_governance']} recursos",
                "Criar pol√≠tica de tagging obrigat√≥ria",
                "Configurar AWS Config para compliance autom√°tico",
                "Treinar equipes sobre import√¢ncia de tags para cost allocation"
            ])
        else:
            audit_result["recommendations"].append("Excelente! Todos os recursos auditados possuem tags de governan√ßa.")
        
        # Prioriza√ß√£o por impacto
        audit_result["priority_actions"] = []
        
        ec2_non_compliant = audit_result["resources_audit"].get("ec2_instances", {}).get("without_governance_count", 0)
        if ec2_non_compliant > 0:
            audit_result["priority_actions"].append(f"ALTA: {ec2_non_compliant} inst√¢ncias EC2 sem tags (maior impacto de custo)")
        
        ebs_non_compliant = audit_result["resources_audit"].get("ebs_volumes", {}).get("without_governance_count", 0)
        if ebs_non_compliant > 0:
            audit_result["priority_actions"].append(f"M√âDIA: {ebs_non_compliant} volumes EBS sem tags")
        
        eip_non_compliant = audit_result["resources_audit"].get("elastic_ips", {}).get("without_governance_count", 0)
        if eip_non_compliant > 0:
            audit_result["priority_actions"].append(f"BAIXA: {eip_non_compliant} Elastic IPs sem tags")
        
        print(f"Auditoria conclu√≠da: {audit_result['summary']['compliance_percentage']} compliance")
        
        return json.dumps(audit_result, cls=JsonEncoder, ensure_ascii=False, indent=2)
        
    except Exception as e:
        import traceback
        tb = traceback.format_exc()
        print(f"Erro na auditoria de governan√ßa: {e}")
        print(f"Traceback:\n{tb}")
        
        return json.dumps({
            "error": f"Erro na auditoria de governan√ßa",
            "details": str(e),
            "traceback": tb,
            "suggestion": "Verifique permiss√µes e conectividade AWS"
        }, ensure_ascii=False, indent=2)


@tool
def identify_orphaned_resources(limit: int = 5) -> str:
    """
    Identifica recursos √≥rf√£os (n√£o utilizados) na conta AWS com limita√ß√£o configur√°vel.
    Prioriza recursos por impacto financeiro potencial.
    
    Args:
        limit: N√∫mero m√°ximo de recursos √≥rf√£os a retornar por categoria (padr√£o: 5)
    
    Returns:
        JSON com recursos √≥rf√£os identificados, priorizados por economia potencial
        
    Recursos √≥rf√£os identificados:
    - Volumes EBS n√£o anexados
    - Elastic IPs n√£o associados
    - Snapshots antigos (>90 dias)
    - Load Balancers sem targets
    - Security Groups n√£o utilizados
    """
    print(f"IDENTIFICANDO RECURSOS √ìRF√ÉOS - Limite: {limit}")
    
    try:
        cost_explorer = CostExplorer()
        session = cost_explorer.aws_client.session
        ec2_client = session.client('ec2')
        elbv2_client = session.client('elbv2')
        
        orphaned_resources = {
            "analysis_timestamp": datetime.now().isoformat(),
            "limit_applied": limit,
            "summary": {
                "total_orphaned_resources": 0,
                "estimated_monthly_savings": 0.0,
                "categories_analyzed": 5
            },
            "orphaned_resources": {}
        }
        
        # 1. Volumes EBS n√£o anexados
        print("Identificando volumes EBS √≥rf√£os...")
        try:
            volumes_response = ec2_client.describe_volumes(
                Filters=[
                    {
                        'Name': 'status',
                        'Values': ['available']  # Volumes n√£o anexados
                    }
                ]
            )
            
            orphaned_volumes = []
            for volume in volumes_response.get('Volumes', []):
                volume_id = volume.get('VolumeId')
                size_gb = volume.get('Size', 0)
                volume_type = volume.get('VolumeType', 'gp2')
                create_time = volume.get('CreateTime')
                
                # Estimativa de custo mensal (pre√ßos aproximados)
                cost_per_gb = {
                    'gp2': 0.10, 'gp3': 0.08, 'io1': 0.125, 'io2': 0.125,
                    'st1': 0.045, 'sc1': 0.025, 'standard': 0.05
                }
                monthly_cost = size_gb * cost_per_gb.get(volume_type, 0.10)
                
                orphaned_volumes.append({
                    "resource_id": volume_id,
                    "size_gb": size_gb,
                    "volume_type": volume_type,
                    "create_time": create_time.isoformat() if create_time else None,
                    "estimated_monthly_cost": round(monthly_cost, 2),
                    "priority": "HIGH" if monthly_cost > 20 else "MEDIUM" if monthly_cost > 5 else "LOW"
                })
            
            # Ordenar por custo e limitar
            orphaned_volumes.sort(key=lambda x: x['estimated_monthly_cost'], reverse=True)
            total_volumes = len(orphaned_volumes)
            limited_volumes = orphaned_volumes[:limit]
            
            orphaned_resources["orphaned_resources"]["ebs_volumes"] = {
                "total_found": total_volumes,
                "resources_returned": len(limited_volumes),
                "truncated": total_volumes > limit,
                "total_estimated_savings": sum(v['estimated_monthly_cost'] for v in orphaned_volumes),
                "resources": limited_volumes
            }
            
            orphaned_resources["summary"]["total_orphaned_resources"] += total_volumes
            orphaned_resources["summary"]["estimated_monthly_savings"] += sum(v['estimated_monthly_cost'] for v in orphaned_volumes)
            
        except Exception as e:
            print(f"Erro ao identificar volumes √≥rf√£os: {e}")
            orphaned_resources["orphaned_resources"]["ebs_volumes"] = {"error": str(e)}
        
        # 2. Elastic IPs n√£o associados
        print("Identificando Elastic IPs √≥rf√£os...")
        try:
            addresses_response = ec2_client.describe_addresses()
            
            orphaned_ips = []
            for address in addresses_response.get('Addresses', []):
                # Elastic IP √© √≥rf√£o se n√£o est√° associado
                if 'AssociationId' not in address:
                    allocation_id = address.get('AllocationId')
                    public_ip = address.get('PublicIp')
                    
                    # Custo de Elastic IP n√£o associado: ~$3.65/m√™s
                    monthly_cost = 3.65
                    
                    orphaned_ips.append({
                        "resource_id": allocation_id or public_ip,
                        "public_ip": public_ip,
                        "domain": address.get('Domain', 'vpc'),
                        "estimated_monthly_cost": monthly_cost,
                        "priority": "MEDIUM"
                    })
            
            total_ips = len(orphaned_ips)
            limited_ips = orphaned_ips[:limit]
            
            orphaned_resources["orphaned_resources"]["elastic_ips"] = {
                "total_found": total_ips,
                "resources_returned": len(limited_ips),
                "truncated": total_ips > limit,
                "total_estimated_savings": sum(ip['estimated_monthly_cost'] for ip in orphaned_ips),
                "resources": limited_ips
            }
            
            orphaned_resources["summary"]["total_orphaned_resources"] += total_ips
            orphaned_resources["summary"]["estimated_monthly_savings"] += sum(ip['estimated_monthly_cost'] for ip in orphaned_ips)
            
        except Exception as e:
            print(f"Erro ao identificar Elastic IPs √≥rf√£os: {e}")
            orphaned_resources["orphaned_resources"]["elastic_ips"] = {"error": str(e)}
        
        # 3. Snapshots antigos (>90 dias)
        print("Identificando snapshots antigos...")
        try:
            snapshots_response = ec2_client.describe_snapshots(OwnerIds=['self'])
            
            orphaned_snapshots = []
            cutoff_date = datetime.now() - timedelta(days=90)
            
            for snapshot in snapshots_response.get('Snapshots', []):
                start_time = snapshot.get('StartTime')
                if start_time and start_time < cutoff_date:
                    snapshot_id = snapshot.get('SnapshotId')
                    volume_size = snapshot.get('VolumeSize', 0)
                    
                    # Custo de snapshot: ~$0.05 por GB/m√™s
                    monthly_cost = volume_size * 0.05
                    
                    orphaned_snapshots.append({
                        "resource_id": snapshot_id,
                        "volume_size_gb": volume_size,
                        "start_time": start_time.isoformat(),
                        "age_days": (datetime.now() - start_time.replace(tzinfo=None)).days,
                        "estimated_monthly_cost": round(monthly_cost, 2),
                        "priority": "HIGH" if monthly_cost > 10 else "MEDIUM" if monthly_cost > 2 else "LOW"
                    })
            
            # Ordenar por custo e limitar
            orphaned_snapshots.sort(key=lambda x: x['estimated_monthly_cost'], reverse=True)
            total_snapshots = len(orphaned_snapshots)
            limited_snapshots = orphaned_snapshots[:limit]
            
            orphaned_resources["orphaned_resources"]["old_snapshots"] = {
                "total_found": total_snapshots,
                "resources_returned": len(limited_snapshots),
                "truncated": total_snapshots > limit,
                "cutoff_days": 90,
                "total_estimated_savings": sum(s['estimated_monthly_cost'] for s in orphaned_snapshots),
                "resources": limited_snapshots
            }
            
            orphaned_resources["summary"]["total_orphaned_resources"] += total_snapshots
            orphaned_resources["summary"]["estimated_monthly_savings"] += sum(s['estimated_monthly_cost'] for s in orphaned_snapshots)
            
        except Exception as e:
            print(f"Erro ao identificar snapshots √≥rf√£os: {e}")
            orphaned_resources["orphaned_resources"]["old_snapshots"] = {"error": str(e)}
        
        # 4. Load Balancers sem targets
        print("Identificando Load Balancers √≥rf√£os...")
        try:
            lbs_response = elbv2_client.describe_load_balancers()
            
            orphaned_lbs = []
            for lb in lbs_response.get('LoadBalancers', []):
                lb_arn = lb.get('LoadBalancerArn')
                lb_name = lb.get('LoadBalancerName')
                lb_type = lb.get('Type', 'application')
                
                # Verificar se tem target groups com targets saud√°veis
                try:
                    tgs_response = elbv2_client.describe_target_groups(LoadBalancerArn=lb_arn)
                    has_healthy_targets = False
                    
                    for tg in tgs_response.get('TargetGroups', []):
                        tg_arn = tg.get('TargetGroupArn')
                        health_response = elbv2_client.describe_target_health(TargetGroupArn=tg_arn)
                        
                        healthy_targets = [
                            target for target in health_response.get('TargetHealthDescriptions', [])
                            if target.get('TargetHealth', {}).get('State') == 'healthy'
                        ]
                        
                        if healthy_targets:
                            has_healthy_targets = True
                            break
                    
                    if not has_healthy_targets:
                        # Estimativa de custo de ALB: ~$16/m√™s, NLB: ~$16/m√™s
                        monthly_cost = 16.0
                        
                        orphaned_lbs.append({
                            "resource_id": lb_arn,
                            "load_balancer_name": lb_name,
                            "type": lb_type,
                            "estimated_monthly_cost": monthly_cost,
                            "priority": "HIGH"
                        })
                        
                except Exception as e:
                    print(f"Erro ao verificar targets do LB {lb_name}: {e}")
            
            total_lbs = len(orphaned_lbs)
            limited_lbs = orphaned_lbs[:limit]
            
            orphaned_resources["orphaned_resources"]["load_balancers"] = {
                "total_found": total_lbs,
                "resources_returned": len(limited_lbs),
                "truncated": total_lbs > limit,
                "total_estimated_savings": sum(lb['estimated_monthly_cost'] for lb in orphaned_lbs),
                "resources": limited_lbs
            }
            
            orphaned_resources["summary"]["total_orphaned_resources"] += total_lbs
            orphaned_resources["summary"]["estimated_monthly_savings"] += sum(lb['estimated_monthly_cost'] for lb in orphaned_lbs)
            
        except Exception as e:
            print(f"Erro ao identificar Load Balancers √≥rf√£os: {e}")
            orphaned_resources["orphaned_resources"]["load_balancers"] = {"error": str(e)}
        
        # Gerar recomenda√ß√µes priorizadas
        orphaned_resources["recommendations"] = _generate_orphaned_resources_recommendations(orphaned_resources)
        
        print(f"An√°lise de recursos √≥rf√£os conclu√≠da: {orphaned_resources['summary']['total_orphaned_resources']} recursos encontrados")
        return json.dumps(orphaned_resources, cls=JsonEncoder, ensure_ascii=False, indent=2)
        
    except Exception as e:
        import traceback
        tb = traceback.format_exc()
        print(f"Erro na identifica√ß√£o de recursos √≥rf√£os: {e}")
        print(f"Traceback:\n{tb}")
        
        return json.dumps({
            "error": f"Erro na identifica√ß√£o de recursos √≥rf√£os",
            "details": str(e),
            "traceback": tb,
            "suggestion": "Verifique permiss√µes EC2 e ELB"
        }, ensure_ascii=False, indent=2)


def _generate_orphaned_resources_recommendations(orphaned_data: Dict[str, Any]) -> List[str]:
    """Gera recomenda√ß√µes priorizadas para recursos √≥rf√£os."""
    recommendations = []
    
    total_savings = orphaned_data.get("summary", {}).get("estimated_monthly_savings", 0)
    
    if total_savings > 100:
        recommendations.append(f"ALTA PRIORIDADE: Economia potencial de ${total_savings:.2f}/m√™s identificada")
    elif total_savings > 20:
        recommendations.append(f"M√âDIA PRIORIDADE: Economia potencial de ${total_savings:.2f}/m√™s identificada")
    
    # Recomenda√ß√µes espec√≠ficas por tipo de recurso
    ebs_data = orphaned_data.get("orphaned_resources", {}).get("ebs_volumes", {})
    if ebs_data.get("total_found", 0) > 0:
        ebs_savings = ebs_data.get("total_estimated_savings", 0)
        recommendations.append(f"Volumes EBS: {ebs_data['total_found']} volumes √≥rf√£os (${ebs_savings:.2f}/m√™s)")
    
    ip_data = orphaned_data.get("orphaned_resources", {}).get("elastic_ips", {})
    if ip_data.get("total_found", 0) > 0:
        ip_savings = ip_data.get("total_estimated_savings", 0)
        recommendations.append(f"Elastic IPs: {ip_data['total_found']} IPs n√£o utilizados (${ip_savings:.2f}/m√™s)")
    
    snapshot_data = orphaned_data.get("orphaned_resources", {}).get("old_snapshots", {})
    if snapshot_data.get("total_found", 0) > 0:
        snapshot_savings = snapshot_data.get("total_estimated_savings", 0)
        recommendations.append(f"Snapshots antigos: {snapshot_data['total_found']} snapshots >90 dias (${snapshot_savings:.2f}/m√™s)")
    
    lb_data = orphaned_data.get("orphaned_resources", {}).get("load_balancers", {})
    if lb_data.get("total_found", 0) > 0:
        lb_savings = lb_data.get("total_estimated_savings", 0)
        recommendations.append(f"Load Balancers: {lb_data['total_found']} LBs sem targets (${lb_savings:.2f}/m√™s)")
    
    if total_savings > 50:
        recommendations.append("Recomenda-se implementar automa√ß√£o para limpeza regular de recursos √≥rf√£os")
    
    return recommendations


@tool
def analyze_multiple_tags_costs(tag_keys: str, start_date: Optional[str] = None, end_date: Optional[str] = None) -> str:
    """
    Analisa custos de m√∫ltiplas tags simultaneamente para um per√≠odo espec√≠fico.
    
    Args:
        tag_keys: Lista de chaves de tags separadas por v√≠rgula (ex: "Environment,Project,kubernetes.io/cluster/jera-cluster")
        start_date: Data inicial no formato YYYY-MM-DD (opcional, padr√£o: 30 dias atr√°s)
        end_date: Data final no formato YYYY-MM-DD (opcional, padr√£o: hoje)
        
    Returns:
        JSON com an√°lise de custos para cada tag especificada
        
    Exemplos:
    - analyze_multiple_tags_costs("Environment,Project,Owner")
    - analyze_multiple_tags_costs("aws:eks:cluster-name,kubernetes.io/cluster/jera-cluster", "2024-05-01", "2024-05-31")
    """
    print(f"ANALISANDO CUSTOS DE M√öLTIPLAS TAGS: {tag_keys}")
    
    try:
        # Processar lista de tags
        tag_list = [tag.strip() for tag in tag_keys.split(',') if tag.strip()]
        
        if not tag_list:
            return json.dumps({
                "error": "Nenhuma tag v√°lida fornecida",
                "suggestion": "Forne√ßa uma lista de tags separadas por v√≠rgula",
                "example": "Environment,Project,Owner"
            }, ensure_ascii=False, indent=2)
        
        cost_explorer = CostExplorer()
        
        # Definir per√≠odo de an√°lise
        if not end_date:
            end_date = datetime.now().strftime('%Y-%m-%d')
        if not start_date:
            start_date = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
        
        # Validar e ajustar as datas
        validated_start, validated_end = validate_and_adjust_date_range(start_date, end_date)
        
        analysis_result = {
            "analysis_timestamp": datetime.now().isoformat(),
            "analysis_period": {
                "start_date": validated_start,
                "end_date": validated_end,
                "days": (datetime.strptime(validated_end, '%Y-%m-%d') - datetime.strptime(validated_start, '%Y-%m-%d')).days
            },
            "tags_analyzed": tag_list,
            "summary": {
                "total_tags_requested": len(tag_list),
                "tags_with_costs": 0,
                "tags_without_costs": 0,
                "total_cost_usd": 0.0,
                "total_cost_brl": 0.0
            },
            "tag_analysis": []
        }
        
        # Analisar cada tag individualmente
        for tag_key in tag_list:
            print(f"Analisando tag: {tag_key}")
            
            try:
                # Buscar custos por esta tag espec√≠fica
                tag_cost_response = cost_explorer.get_cost_by_tag(tag_key, validated_start, validated_end)
                
                tag_analysis = {
                    "tag_key": tag_key,
                    "has_costs": False,
                    "total_cost_usd": 0.0,
                    "total_cost_brl": 0.0,
                    "tag_values": [],
                    "error": None
                }
                
                # Processar resultados
                if tag_cost_response.get('ResultsByTime'):
                    tag_values_costs = {}
                    
                    for period in tag_cost_response['ResultsByTime']:
                        for group in period.get('Groups', []):
                            tag_value = group.get('Keys', [''])[0]
                            cost_usd = float(group.get('Metrics', {}).get('UnblendedCost', {}).get('Amount', '0'))
                            
                            # Limpar valor da tag (remover prefixos se houver)
                            if '$' in tag_value:
                                tag_value = tag_value.split('$')[-1]
                            tag_value = tag_value.rstrip('$')
                            
                            # Ignorar valores vazios ou "NoTag"
                            if tag_value and tag_value.lower() not in ['notag', 'no tag', '']:
                                if tag_value not in tag_values_costs:
                                    tag_values_costs[tag_value] = 0.0
                                tag_values_costs[tag_value] += cost_usd
                    
                    # Organizar valores por custo
                    if tag_values_costs:
                        tag_analysis["has_costs"] = True
                        tag_analysis["total_cost_usd"] = sum(tag_values_costs.values())
                        tag_analysis["total_cost_brl"] = tag_analysis["total_cost_usd"] * 5.5  # Taxa aproximada
                        
                        # Criar lista de valores ordenada por custo
                        for tag_value, cost_usd in sorted(tag_values_costs.items(), key=lambda x: x[1], reverse=True):
                            tag_analysis["tag_values"].append({
                                "value": tag_value,
                                "cost_usd": round(cost_usd, 2),
                                "cost_brl": round(cost_usd * 5.5, 2),
                                "percentage": round((cost_usd / tag_analysis["total_cost_usd"]) * 100, 1) if tag_analysis["total_cost_usd"] > 0 else 0
                            })
                        
                        # Atualizar totais gerais
                        analysis_result["summary"]["tags_with_costs"] += 1
                        analysis_result["summary"]["total_cost_usd"] += tag_analysis["total_cost_usd"]
                        analysis_result["summary"]["total_cost_brl"] += tag_analysis["total_cost_brl"]
                        
                        print(f"‚úÖ Tag '{tag_key}': ${tag_analysis['total_cost_usd']:.2f} encontrados")
                    else:
                        analysis_result["summary"]["tags_without_costs"] += 1
                        print(f"‚ö†Ô∏è  Tag '{tag_key}': Nenhum custo encontrado")
                else:
                    analysis_result["summary"]["tags_without_costs"] += 1
                    print(f"‚ö†Ô∏è  Tag '{tag_key}': Nenhum dado retornado")
                
            except Exception as e:
                tag_analysis["error"] = str(e)
                analysis_result["summary"]["tags_without_costs"] += 1
                print(f"‚ùå Erro ao analisar tag '{tag_key}': {e}")
            
            analysis_result["tag_analysis"].append(tag_analysis)
        
        # Gerar insights e recomenda√ß√µes
        analysis_result["insights"] = []
        analysis_result["recommendations"] = []
        
        if analysis_result["summary"]["tags_with_costs"] == 0:
            analysis_result["insights"].append("Nenhuma das tags especificadas possui custos associados no per√≠odo analisado")
            analysis_result["recommendations"].extend([
                "Verifique se as tags existem nos recursos da conta AWS",
                "Considere usar um per√≠odo de an√°lise maior",
                "Verifique se os recursos est√£o sendo tagueados corretamente"
            ])
        else:
            # Identificar tag mais cara
            tags_with_costs = [tag for tag in analysis_result["tag_analysis"] if tag["has_costs"]]
            if tags_with_costs:
                most_expensive_tag = max(tags_with_costs, key=lambda x: x["total_cost_usd"])
                analysis_result["insights"].append(f"Tag mais cara: '{most_expensive_tag['tag_key']}' com ${most_expensive_tag['total_cost_usd']:.2f}")
            
            # Recomenda√ß√µes baseadas nos resultados
            if analysis_result["summary"]["total_cost_usd"] > 100:
                analysis_result["recommendations"].append("Considere implementar pol√≠ticas de cost optimization para as tags com maior custo")
            
            if analysis_result["summary"]["tags_without_costs"] > 0:
                analysis_result["recommendations"].append(f"{analysis_result['summary']['tags_without_costs']} tags n√£o possuem custos - verifique se est√£o sendo aplicadas corretamente")
        
        # Adicionar informa√ß√µes sobre tags Kubernetes espec√≠ficas
        k8s_tags = [tag for tag in tag_list if 'kubernetes' in tag.lower() or 'eks' in tag.lower()]
        if k8s_tags:
            analysis_result["kubernetes_insights"] = {
                "kubernetes_tags_found": len(k8s_tags),
                "tags": k8s_tags,
                "note": "Tags relacionadas ao Kubernetes/EKS detectadas - custos podem estar distribu√≠dos entre diferentes recursos (EC2, EBS, ELB, etc.)"
            }
        
        print(f"An√°lise conclu√≠da: {analysis_result['summary']['tags_with_costs']}/{len(tag_list)} tags com custos")
        
        return json.dumps(analysis_result, cls=JsonEncoder, ensure_ascii=False, indent=2)
        
    except Exception as e:
        import traceback
        tb = traceback.format_exc()
        print(f"Erro na an√°lise de m√∫ltiplas tags: {e}")
        print(f"Traceback:\n{tb}")
        
        return json.dumps({
            "error": f"Erro na an√°lise de m√∫ltiplas tags",
            "details": str(e),
            "traceback": tb,
            "suggestion": "Verifique se as tags est√£o no formato correto e se voc√™ tem permiss√µes adequadas"
        }, ensure_ascii=False, indent=2)


 